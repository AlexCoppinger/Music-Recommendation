# Week 1

-	Clone the repo onto the computer
-	Including the readme, we should include 2 extra ‘log-files’ to log our goals and accomplishments (dreams?)
-	Django  Using Spotify API
-	Venv
-	HTTP protocol  
o	When go to URL, your browser will issue GET request
o	2 most common request types are GET and POST
	GET request fetches data
	On the server there is a GET request
	Generates some sort of response
	Get request from clients, and generate response
	POSTs request are used when submitting a form 
•	When filling out a form and need to submit, it’s done with a POST request
•	The data will get encrypted, a token imbeds in the page, and submitted with post request and valid
•	Then returns some sort of response

-	Spotipy
-	Install all of these stuffs 
-	“Querie is to setup Django project with Spotify API”
-	Python manage.py  Command used to get to project 
-	Python mange.py shell  to create a shell to access stuff 
-	Settings.py  Keeps a bunch of stuff for running the program  System variables always capitalized (exposed within the settings)
-	I guess IPython is a shell  What’s the use of using this over another shell?
-	Create an app 
o	Python manage.py startapp  <name>
-	When we refer to ‘tables’ we mean ‘models’ or ‘datatables’
o	Django will translate all databases and SQL stuff
-	Migrations are the ‘branches’
-	Views.py handles requests 
Templates folder 
-	Specific way for graphics 
-	Set yourself up with Spotify API (there’s a website developer.spotify.com/dashboard)
-	After creating app, add it to INSTALLED_APPS in settings.py
-	For Redirect URIs need to do it locally:
o	http://  something
o	http://  IP address 127.0.0.01
o	http://127.0.0.1/
-	Get the key the ‘Client ID’ and the ‘Client secret’
o	#add our spotify ID
o	SPOTIFY_CLIENT_ID = ‘key’
o	SPOTIFY_CLIENT_SECRET = ‘secret’
o	Can create a configuration file locally using pyfile to read it 
	Touch command updates a file history and also creates a file
o	Load configuration file 
	CONFIG_FILE = os.path.join(BASE_DIR, from, to)
	In config file
	In config params you don’t put strings in quotes 
	Also secret the secret 
o	
-	We want to connect spotify API to our program
-	Using spotipy.readthedocs.io/en/2.25.1/
o	Modify stuff using these things 
Pbd.set_trace() for setting trace for debugger



I think it’s supposed to but idk
Potential hw

He setup the authentication thing 
And now that that’s resolved, he wants to setup the view so that we 

Endpoints for our URLs get specific??

I’m wondering if this is an excuse for him to be productive with coding

To run server 
Manage.py.runserver


# Week 2

#Wednesday meetup:
Comparing the files from janata to our own, there are a few discrepancies: 

In our vibelink file, we are missing: 
- spotify.py --> Not really sure where this comes from but assuming it has something to do with spotify API
- urls.py --> I assume this may to do with running the actual server? 
- The templates/<proagram> directory --> it includes the html file (named search.html for some reason)

In the musicrec folder, we are missing:
- only the settings folder which includes a second setttings.py and __init__.py. It includes another dev.py file while
- I am confused on what the _pycache_ file is. What are the binary files inside?


Some goals to achieve: 
- setup the secret client_ID mechanism 
- Have a running server that can run locally
- Figure out and understand spotify authentication 

From Janata: 
Make spotify queary 
- In termal he wrote sp.search(q="study" type='playlist', limit=25) --> The terminal responded and gave an out, this may be from the 
spotify terminal that's specific to Janata
- Received keys as a query against the API
- Specific syntax p['playists']['total] --> some sort of dictionary needed 
- in view.py: def search_playlists(request): --> want to search for name of playlist and the type of stuff that go into it 
- add forms.py which imports froms from django 
- make a class PlaylistSearchForm(forms.Form): --> given a form, there are outputs for the user
- clean class validates users' requests/typing 
- search_playists class validates the form and retrieves the result from sp.search(q=queary, type='plaulist', limit=limit)
- loading onto the actual website, we need to specify the path so that the form renders properly
- 